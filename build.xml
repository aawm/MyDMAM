<?xml version="1.0"?>
<project name="MyDMAM" default="build">
	<description>MyDMAM: Another way of looking a Digital Media Asset Management</description>

	<property environment="env" />

	<property name="mydmam.app" location="app" />
	<property name="mydmam.lib" location="lib" />
	<property name="mydmam.startup" location="startup" />

	<condition property="is_windows"><os family="windows"/></condition>
	<condition property="is_linux"><os family="unix"/></condition>
	<condition property="is_mac"><os family="mac"/></condition>
	
	<property name="mydmam.website.url.download" value="http://mydmam.org/dwl" />
	<property name="archive.jre.windows" value="jre-8u121-windows-x64.zip" />
	<property name="archive.jre.linux" value="jre-8u121-linux-x64.tar.gz" />
	<property name="archive.jre.mac" value="jre-8u121-macosx-x64.tar.gz" />
	<property name="archive.jre.extractedbasename" value="jre1.8.0_121" />
	
	<property name="basedir.jrebin.windows" value=".\jre\${archive.jre.extractedbasename}\bin" />
	<property name="basedir.jrebin.linux" value="./jre/${archive.jre.extractedbasename}/bin/" />
	<property name="basedir.jrebin.mac" value="./jre/${archive.jre.extractedbasename}.jre/Contents/Home/bin" />
	<property name="out.dir" location="build" />

	<target name="prepare" description="Prepare output directories">
		<property name="out.bin" location="${out.dir}/bin" />
		<property name="out.lib" location="${out.dir}/lib" />
		<property name="out.src" location="${out.dir}/src" />
		<property name="out.jre" location="${out.dir}/jre" />
		<property name="out.conf" location="${out.dir}/conf" />
		
		<delete dir="${out.dir}" />
		<mkdir dir="${out.dir}" />
		<mkdir dir="${out.bin}" />
		<mkdir dir="${out.lib}" />
		<mkdir dir="${out.jre}" />
		<mkdir dir="${out.conf}" />
	</target>

	<target name="getgitversion" depends="prepare" description="Get git last commit hash">
		<exec executable="git" outputproperty="gitversion">
			<arg value="describe" />
		</exec>
		<echo>Git version: ${gitversion}</echo>
	</target>

	<target name="checklocaljardependencies" depends="prepare" description="Test the needs to download all Play and MyDMAM dependencies or not">
		<!-- If there are some jars in lib directory -->
		<fileset dir="${mydmam.lib}" id="myfileset" includes="*.jar" />
		<pathconvert refid="myfileset" property="fileset.notempty" setonempty="false" />
		<condition property="needstodownloadjardependencies">
			<not>
				<length string="${fileset.notempty}" trim="true" length="50" when="greater" />
			</not>
		</condition>
		<condition property="notneedstodownloadjardependencies">
			<length string="${fileset.notempty}" trim="true" length="50" when="greater" />
		</condition>
	</target>

	<target name="downloadjardependencies" depends="checklocaljardependencies" description="Get all Play and MyDMAM dependencies from MyDMAM website to the build dir" if="needstodownloadjardependencies">
		<mkdir dir="${out.lib}" />
		<get src="${mydmam.websiteurldownload}/lib/" dest="${out.lib}/dependencies.xml" />
		<ant antfile="${out.lib}/dependencies.xml" />
		<delete file="${out.lib}/dependencies.xml" />
		<checksum verifyProperty="isMD5ok">
			<fileset dir="${out.lib}">
				<include name="*.jar" />
			</fileset>
		</checksum>
		<fail message="Invalid checksum for dependencies downloaded jar files.">
			<condition>
				<isfalse value="${isMD5ok}" />
			</condition>
		</fail>
		<delete>
			<fileset dir="${out.lib}" includes="*.jar.MD5" />
		</delete>
	</target>

	<target name="copylocaljardependencies" depends="checklocaljardependencies" description="Copy MyDMAM dependencies to the build dir" if="notneedstodownloadjardependencies">
		<copy todir="${out.lib}" flatten="true">
			<fileset dir="${mydmam.lib}">
				<include name="*.jar" />
			</fileset>
		</copy>
	</target>

	<target name="compile" depends="downloadjardependencies, copylocaljardependencies" description="Invoke javac for make classes">
		
		<!-- Create classpath with all MyDMAM dependencies -->
		<path id="mydmam.classpath">
			<fileset dir="${out.lib}">
				<include name="*.jar" />
			</fileset>
		</path>
		
		<javac srcdir="${mydmam.app}" destdir="${out.bin}" excludes="models react views **/*Test.java" includeantruntime="false" target="1.8">
			<classpath refid="mydmam.classpath" />
			<compilerarg value="-XDignore.symbol.file" />
		</javac>
	</target>

	<target name="makelib" depends="compile, getgitversion" description="Create MyDMAM bin jar">
		<jar basedir="${out.bin}" destfile="${out.lib}/mydmam-${gitversion}-bin.jar">
			<manifest>
				<attribute name="Main-Class" value="hd3gtv.mydmam.MainClass" />
				<attribute name="Codebase" value="mydmam.org" />
				<attribute name="Built-By" value="hdsdi3g" />
				<attribute name="Implementation-Vendor" value="MyDMAM" />
				<attribute name="Implementation-Title" value="MyDMAM" />
				<attribute name="Implementation-Version" value="${gitversion}" />
			</manifest>
		</jar>
		<delete dir="${out.bin}" />
	</target>

	<target name="getjrewindows" depends="prepare" description="Get Oracle JRE for Windows">
		<echo>You must accept the Oracle Binary Code License Agreement for Java SE to download this software.</echo>
		<echo>http://www.oracle.com/technetwork/java/javase/terms/license/index.html</echo>
		<get src="${mydmam.website.url.download}/${archive.jre.windows}" dest="${out.jre}" />
		<unzip src="${out.jre}/${archive.jre.windows}" dest="${out.jre}"/>
		<delete file="${out.jre}/${archive.jre.windows}" />
	</target>

	<target name="getjrelinux" depends="prepare" description="Get Oracle JRE for Linux">
		<echo>You must accept the Oracle Binary Code License Agreement for Java SE to download this software.</echo>
		<echo>http://www.oracle.com/technetwork/java/javase/terms/license/index.html</echo>
		<get src="${mydmam.website.url.download}/${archive.jre.linux}" dest="${out.jre}" />
		<gunzip src="${out.jre}/${archive.jre.linux}" dest="${out.jre}/jre-linux.tar"/>
		<untar src="${out.jre}/jre-linux.tar" dest="${out.jre}" />
		<delete file="${out.jre}/${archive.jre.linux}" />
		<delete file="${out.jre}/jre-linux.tar" />
	</target>

	<target name="getjremac" depends="prepare" description="Get Oracle JRE for macOS">
		<echo>You must accept the Oracle Binary Code License Agreement for Java SE to download this software.</echo>
		<echo>http://www.oracle.com/technetwork/java/javase/terms/license/index.html</echo>
		<get src="${mydmam.website.url.download}/${archive.jre.mac}" dest="${out.jre}" />
		<gunzip src="${out.jre}/${archive.jre.mac}" dest="${out.jre}/jre-mac.tar"/>
		<untar src="${out.jre}/jre-mac.tar" dest="${out.jre}"/>
		<delete file="${out.jre}/${archive.jre.mac}" />
		<delete file="${out.jre}/jre-mac.tar" />
	</target>

	<target name="makestarters" description="Prepare Windows/OSX/Linux starters">
		<echo file="${mydmam.startup}/setup.ini" append="false" force="true">; MyDMAM autogenerated file&#xD;&#xA;
working.directory=..\&#xD;&#xA;
classpath.1=..\conf&#xD;&#xA;
classpath.2=..\lib\*.jar&#xD;&#xA;
vm.location=.${basedir.jrebin.windows}\server\jvm.dll&#xD;&#xA;
vmarg.1=-Dfile.encoding=UTF-8&#xD;&#xA;
</echo>
		<echo file="${mydmam.startup}/setup.bash" append="false" force="true"># MyDMAM autogenerated file&#xA;
JAVA_LINUX=.${basedir.jrebin.linux}\java&#xA;
JAVA_OSX=.${basedir.jrebin.mac}\java&#xA;
</echo>
	</target>

	<target name="preparewinrun4j" description="Make winrun4j executable for the MyDMAM look" if="is_windows">
		<echo>Usage: please add to ${mydmam.startup} RCEDIT64.exe and WinRun4J64c.exe</echo>
		<property name="favicon" location="public/img/favicon.ico" />
		<!-- embed icon -->
		<exec executable="RCEDIT64.exe">
			<!-- add icon -->
			<arg value="/I"/><arg value="${mydmam.startup}/WinRun4J64c.exe"/><arg value="${favicon}"/>
		</exec>
		<copyfile src="${mydmam.startup}/WinRun4J64c.exe" dest="${mydmam.startup}/mydmam-service.exe"/>
		<move file="${mydmam.startup}/WinRun4J64c.exe" tofile="${mydmam.startup}/mydmam-cli.exe"/>
		<delete file="${mydmam.startup}/RCEDIT64.exe"/>
	</target>
	
	<target name="copyproject" depends="prepare" description="Copy all mandatory Play projet items">
		<mkdir dir="${out.dir}/app" />
		<mkdir dir="${out.dir}/app/controllers" />
		<mkdir dir="${out.dir}/app/models" />
		<mkdir dir="${out.dir}/app/views" />
		<copy todir="${out.dir}/app/views">
			<fileset dir="app/views">
			</fileset>
		</copy>

		<copy todir="${out.conf}">
			<fileset dir="conf">
				<exclude name="app.d/" />
				<exclude name="application.conf" />
				<exclude name="build.properties" />
				<exclude name="*.db" />
				<exclude name="dependencies.yml" />
				<exclude name="log4j.xml" />
				<exclude name="ssh/" />
				<exclude name="jsfiles.json" />
			</fileset>
		</copy>
		
		<copy file="${out.conf}/application.conf.examples" tofile="${out.conf}/application.conf" />
		<copy file="${out.conf}/dependencies.yml.examples" tofile="${out.conf}/dependencies.yml" />
		<copy file="${out.conf}/log4j-prod.xml" tofile="${out.conf}/log4j.xml" />
		
		<mkdir dir="${out.conf}/app.d" />
		<copy todir="${out.conf}/app.d">
			<fileset dir="${out.conf}/app.d-examples">
			</fileset>
		</copy>
		
		<copy file="LICENSE" todir="${out.dir}" />
		<copy file="UPGRADE.txt" todir="${out.dir}" />

		<mkdir dir="${out.dir}/modules" />
		<mkdir dir="${out.dir}/test" />

		<copy todir="${out.dir}/public">
			<fileset dir="public">
				<exclude name="javascripts/src/" />
				<exclude name="javascripts/_transformed/" />
				<exclude name="javascripts/_reduced/*.js" />
			</fileset>
		</copy>
		
		<mkdir dir="${out.dir}/startup" />
		<copy todir="${out.dir}/startup">
			<fileset dir="${mydmam.startup}">
				<include name="*.exe" />
				<include name="*.ini" />
				<include name="*.bat" />
				<include name="*.bash" />
			</fileset>
		</copy>
	</target>

	<target name="makesource" depends="prepare, getgitversion" description="Create MyDMAM source jar (autonomous task)">
		<mkdir dir="src" />
		<jar basedir="${mydmam.app}" destfile="src/mydmam-${gitversion}-src.jar" excludes="**/*Test.java">
		</jar>
	</target>

	<target name="copyplayjars" description="Copy Play dependencies to the current lib dir (autonomous task)">
		<copy todir="${mydmam.lib}" flatten="true">
			<fileset dir="${play}/framework/lib">
				<include name="*.jar" />
			</fileset>
			<fileset dir="${play}/framework">
				<include name="*.jar" />
			</fileset>
			<fileset dir="${play}/modules/docviewer/lib/">
				<include name="*.jar" />
			</fileset>
		</copy>
	</target>

	<target name="eclipsify" description="Create Eclipse project in MyDMAM root dir (autonomous task)">
		<antcall target="downloadjardependencies">
			<param name="out.lib" value="${mydmam.lib}"/>
		</antcall>
		<get src="https://raw.githubusercontent.com/hdsdi3g/MyDMAM/eclipsify/.project" dest=".project"/>
		<get src="https://raw.githubusercontent.com/hdsdi3g/MyDMAM/eclipsify/.classpath" dest=".classpath"/>
		<mkdir dir=".settings"/>
		<get src="https://raw.githubusercontent.com/hdsdi3g/MyDMAM/eclipsify/.settings/org.eclipse.core.resources.prefs" dest=".settings/org.eclipse.core.resources.prefs"/>
		<mkdir dir="eclipse"/>
		<mkdir dir="eclipse/classes"/>
		<echo>Declare this directory (${basedir}) in Eclipse, via File/Import/Existing Projects into Workspace.</echo>
		<echo>After that, add ALL jars founded in ${basedir}/lib directory to Project librairies list (via Project property/Java Build Path/Librairies/Add JARs).</echo>
	</target>

	<target name="getjreIfwindows" depends="getjrewindows" description="Get Oracle JRE for Windows, only if this is Windows" if="is_windows"></target>
	<target name="getjreIflinux" depends="getjrelinux" description="Get Oracle JRE for Linux, only if this is Linux" if="is_linux"></target>
	<target name="getjreIfmac" depends="getjremac" description="Get Oracle JRE for macOS, only if this is macOS" if="is_mac"></target>

	<target name="build" depends="makelib, makestarters, copyproject, getjreIfwindows, getjreIflinux, getjreIfmac" description="Prepare dependencies, compile, create jars, and prepare clean project">
	</target>

	<target name="pack" depends="makelib, makestarters, copyproject" description="Helper to create MyDMAM redistribuable archive without JRE">
	</target>
	
	<target name="pack-windows" depends="pack, getjrewindows" description="Create MyDMAM Windows redistribuable archive with JRE">
		<mkdir dir="archive"/>
		<move file="${out.dir}" tofile="archive/mydmam"/>
		<mkdir dir="pack"/>
		<zip destfile="pack/mydmam-windows-${gitversion}.zip" basedir="archive" description="MyDMAM Windows redistribuable ${gitversion}" />
		<checksum file="pack/mydmam-windows-${gitversion}.zip" forceOverwrite="yes" />
		<move file="archive/mydmam" tofile="${out.dir}"/>
		<delete dir="archive"/>
	</target>
	
	<target name="pack-linux" depends="pack, getjrelinux" description="Create MyDMAM Linux redistribuable archive with JRE">
		<mkdir dir="archive"/>
		<move file="${out.dir}" tofile="archive/mydmam"/>
		<mkdir dir="pack"/>
		<tar destfile="pack/mydmam-linux-${gitversion}.tar.gz" basedir="archive" compression="gzip" />
		<checksum file="pack/mydmam-linux-${gitversion}.tar.gz" forceOverwrite="yes" />
		<move file="archive/mydmam" tofile="${out.dir}"/>
		<delete dir="archive"/>
	</target>
	
	<target name="pack-mac" depends="pack, getjremac" description="Create MyDMAM macOS redistribuable archive with JRE">
		<mkdir dir="archive"/>
		<move file="${out.dir}" tofile="archive/mydmam"/>
		<mkdir dir="pack"/>
		<tar destfile="pack/mydmam-macosx-${gitversion}.tar.gz" basedir="archive" compression="gzip" />
		<checksum file="pack/mydmam-macosx-${gitversion}.tar.gz" forceOverwrite="yes" />
		<move file="archive/mydmam" tofile="${out.dir}"/>
		<delete dir="archive"/>
	</target>

	<target name="clean" description="Remove build directory, pack archives and source archive">
		<delete dir="${out.dir}"/>
		<delete dir="src"/>
		<delete dir="pack"/>
		<delete dir="databaseredist"/>
		<delete>
			<fileset dir="." includes="mydmam*.jar"/>
			<fileset dir="." includes="mydmam*.zip"/>
			<fileset dir="." includes="mydmam*.tar.gz"/>
		</delete>
	</target>

	
	<target name="pack-databases" description="Create Cassandra and ElasticSearch redistribuables for MyDMAM">
		<property name="dbredist" location="databaseredist"/>
		<mkdir dir="${dbredist}"/>

		<property name="url-archive-cassandra" value="http://archive.apache.org/dist/cassandra/1.2.19" />
		<property name="url-archive-es" value="https://download.elastic.co/elasticsearch/elasticsearch" />
		
		<property name="archive-cassandra" value="apache-cassandra-1.2.19" />
		<property name="archive-es" value="elasticsearch-1.5.2" />
		
		<!--
		<get src="${url-archive-cassandra}/${archive-cassandra}-bin.tar.gz" dest="${dbredist}" />
		<get src="${url-archive-es}/${archive-es}.tar.gz" dest="${dbredist}" />
		
		<untar src="${dbredist}/${archive-cassandra}-bin.tar.gz" dest="${dbredist}" compression="gzip"/>
		<untar src="${dbredist}/${archive-es}.tar.gz" dest="${dbredist}" compression="gzip"/>

		<delete file="${dbredist}/${archive-cassandra}-bin.tar.gz" />
		<delete file="${dbredist}/${archive-es}.tar.gz" />

		<antcall target="getjrewindows"><param name="out.jre" value="${dbredist}/jre-windows"/>	</antcall>
		<antcall target="getjrelinux">	<param name="out.jre" value="${dbredist}/jre-linux"/>	</antcall>
		<antcall target="getjremac">	<param name="out.jre" value="${dbredist}/jre-macos"/>	</antcall>

		<get src="http://www.apache.org/dist/commons/daemon/binaries/windows/commons-daemon-1.0.15-bin-windows.zip" dest="${dbredist}" />
		<unzip src="${dbredist}/commons-daemon-1.0.15-bin-windows.zip" dest="${dbredist}/commons-daemon-1.0.15/" />
		<move file="${dbredist}/commons-daemon-1.0.15/amd64/prunsrv.exe" todir="${dbredist}" />
		<delete file="${dbredist}/commons-daemon-1.0.15-bin-windows.zip" />
		<delete dir="${dbredist}/commons-daemon-1.0.15" />
		
		<move file="${dbredist}/${archive-cassandra}/conf/cassandra.yaml" tofile="${dbredist}/${archive-cassandra}/conf/cassandra.yaml.original"></move>
		<echo file="${dbredist}/${archive-cassandra}/conf/cassandra.yaml" append="false" force="true"># MyDMAM autogenerated file
# YOU MUST SET THE SAME VALUE LIKE IN MyDMAM CONF cassandra.yml (mycluster is the default)
cluster_name: 'mycluster'
			
# YOU MUST SET THE SEED LIST, COMMA SEPARATED: ALL CASSANDRA NODES
seed_provider:
    - class_name: org.apache.cassandra.locator.SimpleSeedProvider
      parameters:
          - seeds: "127.0.0.1"
			
# YOU MUST SET THIS HOST ADDR (THIS CASSANDRA SERVER), or 0.0.0.0
listen_address: 127.0.0.1
rpc_address: 127.0.0.1

# YOU MUST SET CASSANDRA DATA DIRECTORIES, CREATE THEM, AND SET VALID RIGHTS
data_file_directories:
    - ./data
commitlog_directory: ./commitlog
saved_caches_directory: ./saved_caches

concurrent_reads: 4
concurrent_writes: 4
endpoint_snitch: GossipingPropertyFileSnitch
internode_compression: none
initial_token:
hinted_handoff_enabled: true
hinted_handoff_throttle_in_kb: 1024
max_hints_delivery_threads: 2
batchlog_replay_throttle_in_kb: 1024
authenticator: AllowAllAuthenticator
authorizer: AllowAllAuthorizer
permissions_validity_in_ms: 2000
partitioner: org.apache.cassandra.dht.Murmur3Partitioner
disk_failure_policy: stop
key_cache_size_in_mb:
key_cache_save_period: 14400
row_cache_size_in_mb: 0
row_cache_save_period: 0
row_cache_provider: SerializingCacheProvider
commitlog_sync: periodic
commitlog_sync_period_in_ms: 10000
commitlog_segment_size_in_mb: 32
flush_largest_memtables_at: 0.75
reduce_cache_sizes_at: 0.85
reduce_cache_capacity_to: 0.6
memtable_flush_queue_size: 4
trickle_fsync: false
trickle_fsync_interval_in_kb: 10240
storage_port: 7000
ssl_storage_port: 7001
start_native_transport: true
native_transport_port: 9042
start_rpc: true
rpc_port: 9160
rpc_keepalive: true
rpc_server_type: sync
thrift_framed_transport_size_in_mb: 15
incremental_backups: false
snapshot_before_compaction: false
auto_snapshot: true
tombstone_debug_threshold: 10000
column_index_size_in_kb: 64
in_memory_compaction_limit_in_mb: 64
multithreaded_compaction: false
compaction_throughput_mb_per_sec: 16
compaction_preheat_key_cache: true
read_request_timeout_in_ms: 10000
range_request_timeout_in_ms: 10000
write_request_timeout_in_ms: 10000
truncate_request_timeout_in_ms: 60000
request_timeout_in_ms: 10000
cross_node_timeout: false
dynamic_snitch_update_interval_in_ms: 100
dynamic_snitch_reset_interval_in_ms: 600000
dynamic_snitch_badness_threshold: 0.1
request_scheduler: org.apache.cassandra.scheduler.NoScheduler
index_interval: 128
server_encryption_options:
    internode_encryption: none
    keystore: conf/.keystore
    keystore_password: cassandra
    truststore: conf/.truststore
    truststore_password: cassandra
client_encryption_options:
    enabled: false
    keystore: conf/.keystore
    keystore_password: cassandra
inter_dc_tcp_nodelay: true
</echo>
		-->

		<!--
		TODO create systemd cassandra
		TODO prepare ES
		
		TODO DOC:
		== Cassandra
		 - edit log4j-server.properties (log4j.appender.R.File) and conf/cassandra.yaml
		 - Windows, get instructions for create service in bin/cassandra.bat (prunsrv.exe will be founded a the root directory)
		 - Windows, set JAVA_HOME to jre-windows/jre1.x.0_xxx
		
		<property name="basedir.jrebin.windows" value="${dbredist}/jre-windows/${archive.jre.extractedbasename}/bin" />
		<property name="basedir.jrebin.linux" value="${dbredist}/jre-linux/${archive.jre.extractedbasename}/bin" />
		<property name="basedir.jrebin.mac" value="${dbredist}/jre-macos/${archive.jre.extractedbasename}.jre/Contents/Home/bin" />

		<property name="basedir.jrebin.windows" value=".\jre\${archive.jre.extractedbasename}\bin" />
		<property name="basedir.jrebin.linux" value="./jre/${archive.jre.extractedbasename}/bin/" />
		<property name="basedir.jrebin.mac" value="./jre/${archive.jre.extractedbasename}.jre/Contents/Home/bin" />
		-->
		
	</target>

	
	<!--
	TODO add doc: it needs JDK !
	TODO add doc: `ln -s $BASEPATH/startup/mydmam-cli.bash /bin/mydmam` + ffmpeg + IM...
	TODO add doc: ant eclipsify + clean
	TODO add doc: ant -Dplay="/opt/play" copyplayjars
	TODO add doc pack-databases
	TODO add doc firewall...
	-->

</project>
