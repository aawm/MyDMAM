/*
 * This file is part of MyDMAM.
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * 
 * Copyright (C) hdsdi3g for hd3g.tv 2015
 * 
*/
package hd3gtv.mydmam.web;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;

import org.apache.commons.io.FileUtils;

import com.google.gson.JsonPrimitive;

import hd3gtv.mydmam.Loggers;
import hd3gtv.mydmam.MyDMAM;
import hd3gtv.mydmam.web.NodeJSBabel.Operation;
import hd3gtv.tools.CopyMove;

/**
 * Autonomus functions for JS/JSX processing.
 */
public class JSProcessor {
	
	private NodeJSBabel node_js_babel;
	private String input;
	private String output;
	private File filename;
	private String module_name;
	private String module_path;
	
	public JSProcessor(File filename, String module_name, String module_path, NodeJSBabel node_js_babel) throws NullPointerException, IOException {
		this.module_name = module_name;
		if (module_name == null) {
			throw new NullPointerException("\"module_name\" can't to be null");
		}
		this.module_path = module_path;
		if (module_path == null) {
			throw new NullPointerException("\"module_path\" can't to be null");
		}
		this.filename = filename;
		if (filename == null) {
			throw new NullPointerException("\"filename\" can't to be null");
		}
		this.node_js_babel = node_js_babel;
		if (node_js_babel == null) {
			throw new NullPointerException("\"node_js_babel\" can't to be null");
		}
		
		Loggers.Play_JSSource.debug("Create JSProcessor for " + filename + " (module: " + module_name + ")");
		CopyMove.checkExistsCanRead(filename);
		input = FileUtils.readFileToString(filename, MyDMAM.UTF8);
		output = input;
	}
	
	public void reduceJS() throws IOException, BabelException {
		Loggers.Play_JSSource.debug("Reduce JS: " + filename.getPath() + " (module: " + module_name + ")");
		output = node_js_babel.operate(input, Operation.REDUCE);
		input = output;
	}
	
	public void transformJSX() throws IOException, BabelException {
		Loggers.Play_JSSource.debug("Transform JSX: " + filename.getPath() + " (module: " + module_name + ")");
		output = node_js_babel.operate(input, Operation.TRANSFORM);
		input = output;
	}
	
	public void writeTo(File filename, Operation operation) throws IOException {
		Loggers.Play_JSSource.debug("Write " + this.filename + " " + operation.toLogVerbString() + " to " + filename + " (module: " + module_name + ")");
		FileUtils.write(filename, output, MyDMAM.UTF8, false);
	}
	
	public void wrapScopeDeclaration(String source_scope, String hash) {
		Loggers.Play_JSSource.debug("Wrap scope declaration, for " + filename + ", scope: " + source_scope + " (module: " + module_name + ")");
		StringBuilder sb = new StringBuilder(input.length() + 100);
		sb.append("/** This file is automatically generated! Do not edit. */ (function(");
		if (source_scope.lastIndexOf(".") > -1) {
			sb.append(source_scope.substring(source_scope.lastIndexOf(".") + 1, source_scope.length()));
		} else {
			sb.append(source_scope);
		}
		sb.append(") { ");
		sb.append(input);
		sb.append("\n})(window.");
		sb.append(source_scope);
		sb.append(");\n");
		sb.append("// Generated by ");
		sb.append(getClass().getName());
		sb.append(" for the module ");
		sb.append(module_name);
		sb.append("\n");
		sb.append("// Source hash: ");
		sb.append(hash);
		sb.append("\n");
		
		output = sb.toString();
		input = output;
	}
	
	public void wrapTransformationError(BabelException e) {
		ArrayList<String> babel_stacktrace = e.getBabelStacktrace();
		final StringBuffer sb = new StringBuffer();
		
		babel_stacktrace.forEach(line -> {
			sb.append(line);
			sb.append("\n");
		});
		
		ByteArrayOutputStream baos = new ByteArrayOutputStream();
		PrintWriter pw = new PrintWriter(baos);
		pw.println("// Babel SyntaxError");
		pw.println("new function(){");
		pw.println("	$(document).ready(function() {");
		pw.println("		var message = {}");
		pw.println("        message.from = " + (new JsonPrimitive(module_name + " module: " + filename.getAbsolutePath().substring(module_path.length()))).toString());
		pw.println("        message.text = " + (new JsonPrimitive(e.getMessage())).toString());
		pw.println("        message.line = " + (new JsonPrimitive(sb.toString())).toString());
		pw.println("		jsx_error_messages.push(message);");
		pw.println("	});");
		pw.println("}();");
		pw.close();
		output = new String(baos.toByteArray());
		input = output;
		
		if (Loggers.Play_JSSource.isDebugEnabled()) {
			Loggers.Play_JSSource.warn("Babel " + e.getMessage() + " in " + filename + ", module: " + module_name + "\n" + sb.toString());
		} else {
			Loggers.Play_JSSource.warn("Babel SyntaxError for " + filename + " (module: " + module_name + " in " + module_path + ")", e);
		}
	}
	
}
