/** This file is automatically generated! Do not edit. */ (function(manager) { /*
 * This file is part of MyDMAM.
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * 
 * Copyright (C) hdsdi3g for hd3g.tv 2016
 * 
*/

manager.Perfstats = React.createClass({displayName: "Perfstats",
	getInitialState: function() {
		return {
			list: {},
			interval: null,
		};
	},
	componentWillMount: function() {
		this.refresh();
	},
	refresh: function() {
		mydmam.async.request("instances", "allperfstats", null, function(list) {
			this.setState({list: list});
		}.bind(this));
	},
	componentDidMount: function(){
		this.setState({interval: setInterval(this.refresh, 5000)});
	},
	componentWillUnmount: function() {
		if (this.state.interval) {
			clearInterval(this.state.interval);
		}
	},
	render: function() {
		var items = [];
		for (var instance_ref in this.state.list) {
			items.push(React.createElement(manager.PerfstatsInstance, {key: instance_ref, instance: this.state.list[instance_ref]}));
		}
		return (
			React.createElement("div", null, items)
		);
	},
});

manager.PerfstatsInstance = React.createClass({displayName: "PerfstatsInstance",
	render: function() {
		var instance = this.props.instance;

		var showMBsize= function(val) {
			if (val > 1000 * 1000 * 10) {
				return mydmam.format.number(Math.round(val / (1000 * 1000))) + " MB";
			} else {
				return mydmam.format.number(val) + " bytes";
			}
		}

		var update_since = null;
		if (instance.now + 2000 < Date.now()) {
			update_since = (React.createElement(mydmam.async.pathindex.reactSinceDate, {i18nlabel: "manager.perfstats.since", date: instance.now}));
		}

		var percent_free = (instance.freeMemory / instance.maxMemory) * 100;
		var percent_total = ((instance.totalMemory / instance.maxMemory) * 100) - percent_free;

		var heap_used = ((instance.heapUsed / instance.maxMemory) * 100);
		var non_heap_used = ((instance.nonHeapUsed / instance.maxMemory) * 100);

		var gc_table = [];
		for (var pos in instance.gc) {
			var gc = instance.gc[pos];
			gc_table.push(React.createElement("tr", {key: pos}, 
				React.createElement("th", null, gc.name), 
				React.createElement("td", null, gc.time / 1000, " sec"), 
				React.createElement("td", null, gc.count, " items")
			));
		}

		var os_table = null;
		if (instance.os) {
			var os = instance.os;
			os_table = (React.createElement("table", {className: "table table-bordered table-striped table-condensed table-hover", style: {width: "inherit"}}, 
				React.createElement("tr", null, 
					React.createElement("th", null, "CPU load"), 
					React.createElement("td", null, "JVM process: ", Math.round(os.getProcessCpuLoad * 100) / 100), 
					React.createElement("td", {colSpan: "2"}, "System: ", Math.round(os.getSystemCpuLoad * 100) / 100)
				), 
				React.createElement("tr", null, 
					React.createElement("th", null, "JVM CPU time"), 
					React.createElement("td", {colSpan: "3"}, Math.round(os.getProcessCpuTime / (1000 * 1000 * 100)) / 100, " sec")
				), 
				React.createElement("tr", null, 
					React.createElement("th", null, "Physical memory"), 
					React.createElement("td", null, "Free: ", showMBsize(os.getFreePhysicalMemorySize)), 
					React.createElement("td", null, "Total: ", showMBsize(os.getTotalPhysicalMemorySize)), 
					React.createElement("td", null, "Used: ", Math.floor(((os.getTotalPhysicalMemorySize - os.getFreePhysicalMemorySize) / os.getTotalPhysicalMemorySize) * 100), "%")
				), 
				React.createElement("tr", null, 
					React.createElement("th", null, "Swap"), 
					React.createElement("td", null, "Free: ", showMBsize(os.getFreeSwapSpaceSize)), 
					React.createElement("td", null, "Total: ", showMBsize(os.getTotalSwapSpaceSize)), 
					React.createElement("td", null, "Used: ", Math.floor(((os.getTotalSwapSpaceSize - os.getFreeSwapSpaceSize) / os.getTotalSwapSpaceSize) * 100), "%")
				), 
				React.createElement("tr", null, 
					React.createElement("td", {colSpan: "4"}, "Committed virtual memory size: ", showMBsize(os.getCommittedVirtualMemorySize))
				)
			));
		}

		return (React.createElement("div", null, 
			React.createElement("h4", null, 
				instance.instance_name, " ", 
				React.createElement("small", {className: "muted"}, instance.pid, "@", instance.host_name), " ", 
				React.createElement("span", {className: "badge badge-important"}, 
					"Load ", Math.round(instance.getSystemLoadAverage * 100)/100
				), " ", 
				update_since
			), 
			React.createElement("div", {style: {marginLeft: "15px"}}, 
				"Memory free: ", showMBsize(instance.freeMemory), ", total: ", showMBsize(instance.totalMemory), ", max: ", showMBsize(instance.maxMemory), ".", React.createElement("br", null), 
			    React.createElement("div", {className: "progress", style: {width: "40%"}}, 
					React.createElement("div", {className: "bar bar-warning", style: {width: percent_total + "%"}}), 
					React.createElement("div", {className: "bar bar-success", style: {width: percent_free + "%"}})
				), 

				React.createElement("p", null, 
					"Classes count unloaded: ", instance.getUnloadedClassCount, ", loaded: ", instance.getLoadedClassCount, ", total loaded: ", instance.getTotalLoadedClassCount, ", object pending finalization: ", instance.getObjectPendingFinalizationCount
				), 
				
				"Heap memory: ", React.createElement("span", {className: "text-info"}, showMBsize(instance.heapUsed)), ", non heap: ", React.createElement("span", {className: "text-error"}, showMBsize(instance.nonHeapUsed)), React.createElement("br", null), 

				React.createElement("div", {className: "progress", style: {width: "40%"}}, 
					React.createElement("div", {className: "bar bar-info", style: {width: heap_used + "%"}}), 
					React.createElement("div", {className: "bar bar-danger", style: {width: non_heap_used + "%"}})
				), 

				os_table, 
				
				React.createElement("table", {className: "table table-bordered table-striped table-condensed table-hover", style: {width: "inherit"}}, 
					React.createElement("tbody", null, 
						gc_table
					)
				)
			), 
			React.createElement("hr", null)			
		));
	},
});

})(window.mydmam.async.manager);
// Generated by hd3gtv.mydmam.web.JSProcessor for the module internal
// Source hash: 49112c56949042fd21852696fdfff8b1
