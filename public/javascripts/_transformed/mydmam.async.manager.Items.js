/** This file is automatically generated! Do not edit. */ (function(manager) { /*
 * This file is part of MyDMAM.
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * 
 * Copyright (C) hdsdi3g for hd3g.tv 2016
 * 
*/


/*
 * This file is part of MyDMAM.
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * 
 * Copyright (C) hdsdi3g for hd3g.tv 2015
 * 
*/

manager.Items = React.createClass({displayName: "Items",
	getInitialState: function() {
		return {
			items: {},
			interval: null,
			selected_instances: [],
			selected_item_classes: [],
		};
	},
	componentWillMount: function() {
		this.refresh(true);
	},
	refresh: function(select_all) {
		mydmam.async.request("instances", "allitems", null, function(items) {
			var selected_instances = this.state.selected_instances;
			if (select_all) {
				selected_instances = [];
				for (var instance_key in items) {
					selected_instances.push(instance_key);
				}
				selected_item_classes = this.getAllClassesNames(items);
			}
			this.setState({
				items: items,
				selected_instances: selected_instances,
				selected_item_classes: selected_item_classes,
			});
		}.bind(this));
	},
	componentDidMount: function(){
		//this.setState({interval: setInterval(this.refresh, 10000)});
	},
	componentWillUnmount: function() {
		if (this.state.interval) {
			clearInterval(this.state.interval);
		}
	},
	onSelectInstance: function(instance_ref, add) {
		if (instance_ref == "_all") {
			var all = [];
			if (add) {
				for (var instance_key in this.state.items) {
					all.push(instance_key);
				}
			}
			this.setState({selected_instances: all});
			return;
		}

		var actual = this.state.selected_instances.slice();
		if (actual.indexOf(instance_ref) == -1 && add) {
			actual.push(instance_ref);
			this.setState({selected_instances: actual});
		} else if (actual.indexOf(instance_ref) > -1 && (add == false)) {
			actual.splice(actual.indexOf(instance_ref), 1);
			this.setState({selected_instances: actual});
		}
	},
	onSelectItemClasses: function(class_name, add) {
		if (class_name == "_all") {
			var all = [];
			if (add) {
				all = this.getAllClassesNames();
			}
			this.setState({selected_item_classes: all});
			return;
		}

		var actual = this.state.selected_item_classes.slice();
		if (actual.indexOf(class_name) == -1 && add) {
			actual.push(class_name);
			this.setState({selected_item_classes: actual});
		} else if (actual.indexOf(class_name) > -1 && (add == false)) {
			actual.splice(actual.indexOf(class_name), 1);
			this.setState({selected_item_classes: actual});
		}
	},
	getAllClassesNames: function(all_items) {
		if (all_items == null) {
			all_items = this.state.items;
		}
		var item_classes = [];
		for (var instance_key in all_items) {
			var items = all_items[instance_key];
			for (var pos_items in items) {
				var item_class = items[pos_items]["class"];
				if (item_classes.indexOf(item_class) == -1) {
					item_classes.push(item_class);
				}
			}
		}
		return item_classes;
	},
	onGotoTheTop: function(e) {
		e.preventDefault();
		$("html, body").scrollTop(0);
	},
	render: function() {

		/**
		 * Left panel
		 */
		var display_instance_list = [];
		for (var instance_key in this.state.items) {
			var items = this.state.items[instance_key];
			var summary = this.props.summaries[instance_key];
			var checked = this.state.selected_instances.indexOf(instance_key) > -1;
			var label = instance_key;
			if (summary != null) {
				label = (React.createElement("span", null, summary.instance_name, " ", React.createElement("small", null, "(", summary.app_name, ")")));
			}
			display_instance_list.push(React.createElement(manager.SelectNavItemInstance, {key: instance_key, onClick: this.onSelectInstance, reference: instance_key, checked: checked}, 
				label
			));
		}

		if (display_instance_list.length > 1) {
			var checked = this.state.selected_instances.length == display_instance_list.length;
			display_instance_list.splice(0, 0, (React.createElement(manager.SelectNavItemInstance, {key: "_all", onClick: this.onSelectInstance, reference: "_all", checked: checked}, 
				"ALL"
			)));
		}

		var display_item_classes_list = [];
		var item_classes = this.getAllClassesNames();
		for (var pos in item_classes) {
			var classname = item_classes[pos];
			var checked = this.state.selected_item_classes.indexOf(classname) > -1;
			display_item_classes_list.push(React.createElement(manager.SelectNavItemInstance, {key: pos, onClick: this.onSelectItemClasses, reference: classname, checked: checked}, 
				classname
			));
		}


		if (display_item_classes_list.length > 1) {
			var checked = this.state.selected_item_classes.length == display_item_classes_list.length;
			display_item_classes_list.splice(0, 0, (React.createElement(manager.SelectNavItemInstance, {key: "_all", onClick: this.onSelectItemClasses, reference: "_all", checked: checked}, 
				"ALL"
			)));
		}

		/**
		 * Items
		 */
		var display_items = [];
		for (var instance_key in this.state.items) {
			if (this.state.selected_instances.indexOf(instance_key) == -1) {
				continue;
			}
			var items = this.state.items[instance_key];

			/**
			 * Display title
			 */
			var summary = this.props.summaries[instance_key];
			if (summary != null) {
				display_items.push(React.createElement("h3", {key: instance_key + "-title", style: {marginBottom: 6}}, 
					summary.instance_name, " ", 
					React.createElement("small", null, 
						"• ", summary.app_name, " • ", summary.pid, "@", summary.host_name
					)
				));
			} else {
				display_items.push(React.createElement("h3", {key: instance_key + "-title", style: {marginBottom: 6}}, 
					instance_key
				));
			}

			for (var pos_items in items) {
				var json_item = items[pos_items];
				var item_class = json_item["class"];
				if (this.state.selected_item_classes.indexOf(item_class) == -1) {
					continue;
				}
				var item = mydmam.module.f.managerInstancesItems(json_item);
				if (item == null) {
					/**
					 * Display default view: raw json
					 */
					item = (React.createElement("div", null, 
						React.createElement("code", {className: "json", style: {marginTop: 10}}, 
							React.createElement("i", {className: "icon-indent-left"}), 
							React.createElement("span", {className: "jsontitle"}, " ", json_item["class"], " "), 
							JSON.stringify(json_item.content, null, " ")
						)
					));
				}

				/**
				 * Add view in list.
				 */
				display_items.push(React.createElement("div", {key: md5(instance_key + " " + pos_items), style: {marginBottom: 26, marginLeft: 10}}, 
					React.createElement("div", {className: "pull-right"}, mydmam.async.broker.displayKey(json_item.key, true)), 
					React.createElement("h4", null, 
						React.createElement("a", {href: location.hash, onClick: this.onGotoTheTop}, React.createElement("i", {className: " icon-arrow-up", style: {marginRight: 5, marginTop: 5}})), 
						item_class
					), 
					React.createElement("div", {className: "instance-item-block"}, 
						item
					)
				));
			}
			display_items.push(React.createElement("hr", {key: instance_key + "-hr", style: {marginBottom: 10}}));
		}

		return (React.createElement("div", {className: "row-fluid"}, 
			React.createElement("div", {className: "span3"}, 
			 	React.createElement("div", {className: "well", style: {padding: 8}}, 
				    display_instance_list, 
				    React.createElement("hr", null), 
				    display_item_classes_list
			    )
			), 
			React.createElement("div", {className: "span9", style: {marginLeft: 15}}, 
				display_items
			)
		));
	},
});

manager.SelectNavItemInstance = React.createClass({displayName: "SelectNavItemInstance",
	getInitialState: function() {
		return {
			checked: this.props.checked,
		};
	},
	componentWillReceiveProps: function(nextProps) {
		this.setState({checked: nextProps.checked});
	},
	onClick: function (e) {
		e.preventDefault();
		this.props.onClick(this.props.reference, ! this.state.checked);
		this.setState({checked: ! this.state.checked});
	},
 	render: function() {

 		return (React.createElement("div", null, 
 			React.createElement("label", {className: "checkbox", onClick: this.onClick}, 
				React.createElement("input", {type: "checkbox", ref: "cb", checked: this.state.checked, onChange: this.onClick}), " ", this.props.children
			)
		));
	},
});

mydmam.module.register("AppManager", {
	managerInstancesItems: function(item) {
		if (item["class"] != "AppManager") {
			return null;
		}
		return (React.createElement("div", null, 
			React.createElement(mydmam.async.LabelBoolean, {label_true: i18n("manager.items.AppManager.broker.on"), label_false: i18n("manager.items.AppManager.broker.off"), value: item.content.brokeralive, inverse: true}), " ", 
			React.createElement(mydmam.async.LabelBoolean, {label_true: i18n("manager.items.AppManager.inoffhours"), label_false: i18n("manager.items.AppManager.innormalhours"), value: item.content.is_off_hours}), " ", 
			React.createElement(mydmam.async.pathindex.reactDate, {date: item.content.next_updater_refresh_date, i18nlabel: i18n("manager.items.AppManager.next_updater_refresh_date"), style: {marginLeft: 0}})
		));
	}
});

mydmam.module.register("CyclicJobCreator", {
	managerInstancesItems: function(item) {
		if (item["class"] != "CyclicJobCreator") {
			return null;
		}
		var content = item.content;

		var declaration_list = [];
		for (var pos in content.declarations) {
			var declaration = content.declarations[pos];
			
			var context_list = [];
			for (var pos_ctx in declaration.contexts) {
				var context = declaration.contexts[pos_ctx];
				context_list.push(React.createElement("div", {key: pos_ctx, style: {marginLeft: 10}}, 
					mydmam.async.broker.displayContext(context)
				));
			}
			declaration_list.push(React.createElement("div", {key: pos, style: {marginLeft: 12}}, 
				React.createElement("strong", null, "• ", declaration.job_name), React.createElement("br", null), 
				context_list
			));
		}

		return (React.createElement("div", null, 
			React.createElement("strong", null, content.long_name, " :: ", content.vendor_name), React.createElement("br", null), 
			React.createElement(mydmam.async.LabelBoolean, {label_true: i18n("manager.items.CyclicJobCreator.enabled"), label_false: i18n("manager.items.CyclicJobCreator.disabled"), value: content.enabled, inverse: true}), " ", 
			React.createElement(mydmam.async.pathindex.reactDate, {date: content.next_date_to_create_jobs, i18nlabel: i18n("manager.items.CyclicJobCreator.next_date_to_create_jobs"), style: {marginLeft: 0}}), " ", 
			React.createElement(mydmam.async.LabelBoolean, {label_true: i18n("manager.items.CyclicJobCreator.onlyoff"), label_false: i18n("manager.items.CyclicJobCreator.norestricted"), value: content.only_off_hours}), " ", 
			React.createElement("br", null), 
			i18n("manager.items.CyclicJobCreator.period", content.period / 1000), 
			React.createElement("br", null), 
			i18n("manager.items.CyclicJobCreator.creator"), " ", React.createElement(mydmam.async.JavaClassNameLink, {javaclass: content.creator}), 
			React.createElement("div", {style: {marginTop: 16}}, 
				React.createElement("i", {className: "icon-th-list"}), " ", i18n("manager.items.CyclicJobCreator.declarations"), React.createElement("br", null), 
				declaration_list
			)
		));
	}
});

//TODO WORKER !

})(window.mydmam.async.manager);
// Generated by hd3gtv.mydmam.web.JSProcessor for the module internal
// Source hash: 459528b09aad57a9c74966c42330ec39
