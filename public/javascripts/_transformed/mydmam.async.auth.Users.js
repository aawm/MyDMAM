/** This file is automatically generated! Do not edit. */ (function(auth) { /*
 * This file is part of MyDMAM.
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * 
 * Copyright (C) hdsdi3g for hd3g.tv 2016
 * 
*/

auth.Users = React.createClass({displayName: "Users",
	getInitialState: function() {
		return {
			userlist: {},
			grouplist: {},
		};
	},
	componentWillMount: function() {
		mydmam.async.request("auth", "userlist", null, function(userlist) {
			this.setState({userlist: userlist.users});
		}.bind(this));
		mydmam.async.request("auth", "grouplist", null, function(grouplist) {
			this.setState({grouplist: grouplist.groups});
		}.bind(this));
	},
	toogleLockUser: function(user_key) {
		mydmam.async.request("auth", "usertooglelock", user_key, function(user) {
			var new_user_list = jQuery.extend({}, this.state.userlist, {});
			new_user_list[user_key] = user;

			this.setState({userlist: new_user_list});
		}.bind(this));
	},
	render: function(){
		var items = [];
		var userlist = this.state.userlist;
		var grouplist = this.state.grouplist;

		var toList = function (list) {
			var ctrl_list = [];
			for (pos in list) {
				var group_key = list[pos];
				if (grouplist[group_key]) {
					ctrl_list.push(React.createElement("span", {key: pos, style: {marginRight: 5}}, grouplist[group_key].group_name));
				} else {
					ctrl_list.push(React.createElement("span", {key: pos, style: {marginRight: 5}}, group_key));
				}
			}
			return ctrl_list;
		};


		for (user_key in userlist) {
			var user = userlist[user_key];
			items.push(React.createElement("tr", {key: user_key}, 
				React.createElement("td", null, 
					user.fullname
				), 
				React.createElement("td", null, 
					user.login, " ", 
					React.createElement("small", {className: "muted"}, "%", user.domain), " "
				), 
				React.createElement("td", null, 
					user.language
				), 
				React.createElement("td", null, 
					user.email_addr
				), 
				React.createElement("td", null, 
					React.createElement(mydmam.async.pathindex.reactDate, {date: user.lasteditdate})
				), 
				React.createElement("td", null, 
					React.createElement(mydmam.async.pathindex.reactDate, {date: user.lastlogindate}), 
					" ", React.createElement("small", null, user.lastloginipsource)
				), 
				React.createElement("td", null, 
					toList(user.user_groups)
				), 
				React.createElement("td", null, 
					React.createElement(mydmam.async.BtnEnableDisable, {
						simplelabel: false, 
						enabled: user.locked_account == false, 
						labelenabled: "", 
						labeldisabled: "", 
						onEnable: this.toogleLockUser, 
						onDisable: this.toogleLockUser, 
						reference: user_key, 
						iconcircle: true})
				)
			));
		}

		return (React.createElement("div", null, 
			React.createElement("table", {className: "table table-bordered table-striped table-condensed"}, 
				React.createElement("thead", null, 
					React.createElement("tr", null, 
						React.createElement("th", null, i18n("auth.userlongname")), 
						React.createElement("th", null, i18n("auth.username"), " / ", i18n("auth.domain")), 
						React.createElement("th", null, i18n("auth.lang")), 
						React.createElement("th", null, i18n("auth.email")), 
						React.createElement("th", null, i18n("auth.lasteditdate")), 
						React.createElement("th", null, i18n("auth.lastlogin")), 
						React.createElement("th", null, i18n("auth.groups")), 
						React.createElement("th", null, i18n("auth.useractivated"))
					)
				), 
				React.createElement("tbody", null, 
					items
				)
			)
		));
	}
});

//	public static UserViewList userDelete(String key) throws Exception {
//	public static UserView userCreate(NewUser newuser) throws Exception {
//	public static UserView userGet(String key) throws Exception {
//	public static UserView userChangePassword(UserChPassword chpassword) throws Exception {
//	public static UserView userChangeGroup(UserChGroup chgroup) throws Exception {

// All	
//	public static JsonObject getPreferencies() throws Exception {
//	public static UserView changePassword(String new_clear_text_passwd) throws Exception {
//	public static void sendTestMail() throws Exception {
//	public static UserView changeUserMail(String new_mail_addr) throws Exception {
//	public static JsonObject getActivities() throws Exception {
//	public static JsonObject basketsList() throws Exception {
//	public static JsonObject basketPush(BasketUpdate update) throws Exception {
//	public static JsonObject basketDelete(String basket_key) throws Exception {
//	public static JsonObject basketRename(BasketRename rename) throws Exception {
//	public static JsonArray notificationsList() throws Exception {
//	public static JsonArray notificationCheck(String notification_key) throws Exception {

})(window.mydmam.async.auth);
// Generated by hd3gtv.mydmam.web.JSProcessor for the module internal
// Source hash: 1ea0f96943dfb2477de9f1fd5603165d
