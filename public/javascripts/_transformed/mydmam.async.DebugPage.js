/** This file is automatically generated! Do not edit. */ (function(async) { /*
 * This file is part of MyDMAM.
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * 
 * Copyright (C) hdsdi3g for hd3g.tv 2015
 * 
 */

async.DebugPage = React.createClass({displayName: "DebugPage",
	getInitialState: function() {
		return {
			ajscontrollers: null,
			version: null,
		};
	},
	componentWillMount: function() {
		mydmam.async.request("debugpage", "showcontrollers", {}, function(data) {
			this.setState({ajscontrollers: data.controllers, version: data.version});
		}.bind(this));
	},
	render: function() {
		var ajscontrollers = this.state.ajscontrollers;
		if (ajscontrollers == null) {
			return (React.createElement(mydmam.async.PageLoadingProgressBar, null));
		}


		var items = [];
		for (var controller_name in ajscontrollers) {
			var controller = ajscontrollers[controller_name];
			items.push(React.createElement("tr", {key: "c:" + controller_name}, 
				React.createElement("td", {rowSpan: Object.keys(controller.verbs).length + 1}, 
					React.createElement("strong", {className: "text-info"}, 
						React.createElement(async.JavaClassNameLink, {javaclass: controller.controller_class, version: this.state.version})
					)
				)
			));

			for (var verb_name in controller.verbs) {
				var verb = controller.verbs[verb_name];

				var privileges = [];
				for (var pos_privilege in verb.mandatory_privileges){
					privileges.push(verb.mandatory_privileges[pos_privilege]);
				}

				items.push(React.createElement("tr", {key: "c:" + controller_name + ":v:" + verb_name}, 
					React.createElement("td", null, verb_name), 
					React.createElement("td", null, React.createElement(mydmam.async.JavaClassNameLink, {javaclass: verb.parameter_type, version: this.state.version})), 
					React.createElement("td", null, React.createElement(mydmam.async.JavaClassNameLink, {javaclass: verb.return_type, version: this.state.version})), 
					React.createElement("td", {className: "muted"}, privileges.join(" / "))
				));
			}
		}

		return (React.createElement(mydmam.async.PageHeaderTitle, {title: i18n("ajscontroller.debugpage.title"), fluid: "true"}, 
			React.createElement("table", {className: "table table-striped table-hover table-condensed table-bordered"}, 
				React.createElement("thead", null, 
					React.createElement("th", null, i18n("ajscontroller.debugpage.controller")), 
					React.createElement("th", null, i18n("ajscontroller.debugpage.verb")), 
					React.createElement("th", null, i18n("ajscontroller.debugpage.parametertype")), 
					React.createElement("th", null, i18n("ajscontroller.debugpage.returntype")), 
					React.createElement("th", null, i18n("ajscontroller.debugpage.privileges"))
				), 
				React.createElement("tbody", null, 
					items
				)
			)
		));
	}
});

mydmam.routes.push("DebugPage", "debugpage", async.DebugPage, [{name: "debugpage", verb: "showcontrollers"}]);	

})(window.mydmam.async);
// Generated by hd3gtv.mydmam.web.JSProcessor for the module internal
// Source hash: 57ef3e00acb8643e839f082f185721df
