/** This file is automatically generated! Do not edit. */ (function(metadatas) { /*
 * This file is part of MyDMAM.
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * 
 * Copyright (C) hdsdi3g for hd3g.tv 2016
 * 
*/
metadatas.hasAudioGraphicDeepAnalyst = function(previews) {
	return !(previews.audio_graphic_deepanalyst == null);
};

metadatas.AudioGraphicDeepAnalyst = React.createClass({displayName: "AudioGraphicDeepAnalyst",
	getInitialState: function() {
		return {
			last_time_position: 0,
		};
	},
	clickCanvas: function(event) {
		if (this.props.duration == null | this.props.goToNewTime == null) {
			return;
		}
		if (this.props.duration == 0) {
			return;
		}

		var canvas = React.findDOMNode(this.refs.player_cursor);
		var rect = canvas.getBoundingClientRect();
	    var cursor_xpos = event.clientX - rect.left;

		var width = this.props.previews.audio_graphic_deepanalyst.options.width;
		var left_start = 60;
		var right_stop = width - (left_start + 12);
	    var cursor_time_pos = cursor_xpos - left_start;

	    if ((cursor_time_pos >= 0) && (cursor_time_pos <= right_stop)) {
	    	this.props.goToNewTime(this.props.duration * (cursor_time_pos / right_stop));
	    }
	},
	componentDidUpdate: function() {
		if (this.props.duration == null) {
			return;
		}
		if (this.props.duration == 0) {
			return;
		}
		var position = this.props.currentTime / this.props.duration;
		var width = this.props.previews.audio_graphic_deepanalyst.options.width;
		var height = this.props.previews.audio_graphic_deepanalyst.options.height;
		var left_start = 60;
		var top_start = 10;
		var bottom_stop = height - (top_start + 50);
		var right_stop = width - (left_start + 12);

		var internal_width = right_stop;

		var bar_position = Math.floor(internal_width * position) + left_start;

		if (Math.floor(this.state.last_time_position * 50) == Math.floor(this.props.currentTime * 50)) {
			return;
		}

		var canvas = React.findDOMNode(this.refs.player_cursor);
		var ref_width = canvas.width;
		var ref_height = canvas.height;
		
		var ctx = canvas.getContext("2d");
		ctx.fillStyle = "#FFFFFF";
		ctx.clearRect(0, 0, width, height);
		ctx.fillRect(bar_position, top_start, 2, bottom_stop);

		ctx.fillStyle = "#999";
		ctx.font = "18px Arial";
		// /*'\u25B6' + " "  + */
		var current_timecode = mydmam.format.msecToHMSms(this.props.currentTime * 1000, true, true);
		var countdown_timcode = "-" + mydmam.format.msecToHMSms(((Math.ceil(this.props.duration - this.props.currentTime)) * 1000), false, true);
		ctx.fillText(current_timecode + "   " + countdown_timcode, 60, canvas.height - 10);

		this.setState({last_time_position: this.props.currentTime});
	},
	render: function() {
		var previews = this.props.previews;

		if (previews.audio_graphic_deepanalyst == null) {
			return null;
		}
		var file_hash = this.props.file_hash;

		var graphic_url = metadatas.getFileURL(file_hash, previews.audio_graphic_deepanalyst.type, previews.audio_graphic_deepanalyst.file);

		var options = previews.audio_graphic_deepanalyst.options;

		var graphic = (React.createElement("div", {style: {marginTop: "1em", marginBottom: "1em"}}, 
			React.createElement(metadatas.AudioStatsDeepAnalyst, {file_hash: file_hash, lufs_ref: options.lufs_ref, truepeak_ref: options.truepeak_ref}), 
			React.createElement("div", null, React.createElement("img", {src: graphic_url, alt: options.width + "x" + options.height, style: {width:options.width, height:options.height}}))
		));

		if (this.props.duration == null) {
			return graphic;
		}
		if (this.props.duration == 0) {
			return graphic;
		}

		return (React.createElement("div", {style: {marginTop: "1em", marginBottom: "1em"}}, 
			React.createElement(metadatas.AudioStatsDeepAnalyst, {goToNewTime: this.props.goToNewTime, file_hash: file_hash, lufs_ref: options.lufs_ref, truepeak_ref: options.truepeak_ref}), 

			React.createElement("div", {style: {width: options.width, height: options.height}}, 
			    React.createElement("div", {style: {width:"100%", height:"100%", position:"relative"}}, 
					React.createElement("img", {src: graphic_url, alt: options.width + "x" + options.height, style: {width:"100%", height:"100%", position:"absolute", top:0, left:0}}), ";", 
					React.createElement("canvas", {ref: "player_cursor", 
						onClick: this.clickCanvas, 
						style: {width:"100%", height:"100%", position:"absolute", top:0, left:0, cursor: "text"}, 
						width: options.width, 
						height: options.height})
			    )
			)
		));
	}
});

metadatas.AudioStatsDeepAnalyst = React.createClass({displayName: "AudioStatsDeepAnalyst",
	getInitialState: function() {
		return {
			analyst_result: null,
			show_audio_stat_channel: "Overall",
			show_bottom_panel: false,
		};
	},
	componentWillMount: function() {
		mydmam.async.request("stat", "metadataanalystresults", {pathelementkey: this.props.file_hash, mtype: "ffaudioda"}, function(data) {
			this.setState({analyst_result: data});
		}.bind(this));
	},
	toogleBottomPanel: function() {
		this.setState({show_bottom_panel: ! this.state.show_bottom_panel});
	},
	onChooseAudioStatBlock: function(channel_name) {
		this.setState({show_audio_stat_channel: channel_name});
	},
	render: function() {
		var no_value = (React.createElement("span", null, "-∞"));
		var integrated_loudness = no_value;
		var integrated_loudness_threshold = no_value;
		var loudness_range_LRA = no_value;
		var loudness_range_threshold = no_value;
		var loudness_range_LRA_low = no_value;
		var loudness_range_LRA_high = no_value;
		var true_peak = no_value;

		var integrated_loudness_warn_style = {color: "#777"};
		var true_peak_warn_style = {color: "#777"};
		var silence_label_warn = null;

		if (this.state.analyst_result != null) {
			integrated_loudness = this.state.analyst_result.integrated_loudness.toFixed(1);
			integrated_loudness_threshold = this.state.analyst_result.integrated_loudness_threshold.toFixed(1);
			loudness_range_LRA = this.state.analyst_result.loudness_range_LRA.toFixed(1);
			loudness_range_threshold = this.state.analyst_result.loudness_range_threshold.toFixed(1);
			loudness_range_LRA_low = this.state.analyst_result.loudness_range_LRA_low.toFixed(1);
			loudness_range_LRA_high = this.state.analyst_result.loudness_range_LRA_high.toFixed(1);
			true_peak = this.state.analyst_result.true_peak.toFixed(1);

			if ((integrated_loudness - 2) > this.props.lufs_ref) {
				integrated_loudness_warn_style = {color: "#F00"};
			} else if ((integrated_loudness + 2) < this.props.lufs_ref) {
				integrated_loudness_warn_style = {color: "#F0F"};
			} else {
				integrated_loudness_warn_style = {color: "#0F0"};
			}

			if (true_peak > this.props.truepeak_ref) {
				true_peak_warn_style = {color: "#F00"};
			} else {
				true_peak_warn_style = {color: "#0F0"};
			}

			if (this.state.analyst_result.silences) {
				var label = "Silences warn";
				if (this.state.analyst_result.silences.length == 1) {
					label = "Silence warn";
				}
				silence_label_warn = (React.createElement("span", {style: {backgroundColor: "#A00",
					color: "#FAA",
					fontWeight: "bold",
					borderRadius: 4,
					marginLeft: "8px",
					padding: "1px 7px 2px 6px", }}, label));
			}
		}

		var bottom_panel_icon = "+";
		var bottom_panel = null;
		if (this.state.show_bottom_panel & (this.state.analyst_result != null)) {
			bottom_panel_icon = "-";

			var silence_block = null;
			if (this.state.analyst_result.silences) {
				var silences = this.state.analyst_result.silences;
				var silence_block_content = [];
				for (var pos in silences) {
					var silence_entry = silences[pos];
					if (silence_entry.to == 0) {
						/** audio file end by a silence */
						silence_block_content.push(React.createElement("tr", {key: pos}, 
							React.createElement("td", {colSpan: "3"}, "Ends by silence from ", React.createElement(metadatas.ButtonSilenceGotoPlay, {timevalue: silence_entry.from, onGotoSilence: this.props.goToNewTime}))
						));
					} else {
						silence_block_content.push(React.createElement("tr", {key: pos}, 
							React.createElement("td", null, Math.abs(pos) + 1/*To force interpretate pos in a number */), 
							React.createElement("td", {style: {textAlign: "center"}}, React.createElement(metadatas.ButtonSilenceGotoPlay, {timevalue: silence_entry.from, onGotoSilence: this.props.goToNewTime})), 
							React.createElement("td", {style: {textAlign: "center"}}, "→ ", React.createElement(metadatas.ButtonSilenceGotoPlay, {timevalue: silence_entry.to, onGotoSilence: this.props.goToNewTime})), 
							React.createElement("td", {style: {textAlign: "center"}}, "Δ ", React.createElement(metadatas.ButtonSilenceGotoPlay, {timevalue: silence_entry.to - silence_entry.from}))
						));
					}
				}
				silence_block = (React.createElement("div", {style: {marginBottom: "6px", color: "#bbb"}}, 
					React.createElement("em", null, "Detected silences:"), 
					React.createElement("table", {style: {marginLeft: "6px", }}, 
						React.createElement("tbody", null, 
							silence_block_content
						)
					), 
					React.createElement("small", null, "Silence detect level threshold: ", React.createElement("strong", null, this.state.analyst_result.silencedetect_level_threshold), " dBFS during ", React.createElement("strong", null, this.state.analyst_result.silencedetect_min_duration), " sec.")
				));
			}

			var btn_stat_channels = [];
			btn_stat_channels.push(React.createElement(metadatas.ButtonChooseAudioStatBlock, {selected: this.state.show_audio_stat_channel == "Overall", key: 0, channel: "Overall", onChooseAudioStatBlock: this.onChooseAudioStatBlock}));
			for (var pos in this.state.analyst_result.channels_stat) {
				var channel_name = pos;
				btn_stat_channels.push(
					React.createElement("span", {key: pos + 1}, 
						React.createElement(metadatas.ButtonChooseAudioStatBlock, {channel: channel_name, selected: this.state.show_audio_stat_channel == channel_name, onChooseAudioStatBlock: this.onChooseAudioStatBlock})
					)
				);
			}

			var audio_stat_block = null;
			var createBlockAudioStat = function(stat) {
				var dc_offset = "" + stat.dc_offset.toFixed(6);
				if (stat.dc_offset >= 0) {
					dc_offset = "+" + dc_offset;
				}
				return (React.createElement("div", {style: {marginLeft: "6px", }}, 
					React.createElement("div", null, "DC Offset: ", React.createElement("strong", {style: {color: "rgb(212, 228, 166)", }}, dc_offset)), 
					React.createElement("div", null, "Level: min ", React.createElement("strong", {style: {color: "rgb(106, 127, 138)", }}, stat.min_level), ", max ", React.createElement("strong", {style: {color: "rgb(106, 127, 138)", }}, stat.max_level)), 
					React.createElement("div", null, "Difference: min ", React.createElement("strong", {style: {color: "rgb(121, 141, 147)", }}, stat.min_difference), ", max ", React.createElement("strong", {style: {color: "rgb(121, 141, 147)", }}, stat.max_difference), ", mean ", React.createElement("strong", {style: {color: "rgb(121, 141, 147)", }}, stat.mean_difference)), 
					React.createElement("div", null, "Peak level: ", React.createElement("strong", {style: {color: "rgb(247, 165, 87)", }}, stat.peak_level.toFixed(2)), " dBFS, count: ", React.createElement("strong", {style: {color: "rgb(247, 165, 87)", }}, stat.peak_count)), 
					React.createElement("div", null, "RMS (dBFS): level ", React.createElement("strong", {style: {color: "rgb(167,121,80)", }}, stat.rms_level.toFixed(2)), ", peak ", React.createElement("strong", {style: {color: "rgb(167,121,80)", }}, stat.rms_peak.toFixed(2)), ", trough ", React.createElement("strong", {style: {color: "rgb(167,121,80)", }}, stat.rms_trough.toFixed(2))), 
					React.createElement("div", null, "Crest factor: ", React.createElement("strong", {style: {color: "rgb(78,105,137)", }}, stat.crest_factor.toFixed(2)), ", flat factor: ", React.createElement("strong", {style: {color: "rgb(78,105,137)", }}, stat.flat_factor.toFixed(2)))
				));
			};

			if (this.state.show_audio_stat_channel == "Overall") {
				audio_stat_block = createBlockAudioStat(this.state.analyst_result.overall_stat);
			} else {
				for (var pos in this.state.analyst_result.channels_stat) {
					var channel_name = pos;
					if (this.state.show_audio_stat_channel == channel_name) {
						audio_stat_block = createBlockAudioStat(this.state.analyst_result.channels_stat[pos]);
						break;
					}
				}
			}

			bottom_panel = (React.createElement("div", {style: {
					padding: "0px 12px 12px",
					backgroundColor: "#333",
					color: "#887",
					fontFamily: "Tahoma, Arial",
					width: "300pt",
				}}, 
				silence_block, 
				React.createElement("div", {style: {marginBottom: "6px", marginTop: "0px", paddingTop: "5px", lineHeight: "30px"}}, btn_stat_channels), 
				audio_stat_block, 
				React.createElement("span", {style: {fontWeight: "bold", color: "rgb(92,200,90)", }}, this.state.analyst_result.number_of_samples), " samples"
			));
		}

		return (React.createElement("div", {className: "clearfix", style: {marginBottom: "1em"}}, 
			React.createElement("div", {style: {
					padding: "12px 12px 7px",
					backgroundColor: "#333",
					color: "#fff",
					fontFamily: "Tahoma, Arial",
					width: "300pt",
					fontWeight: "bold",
				}}, 
				React.createElement("div", {style: {left: "0px", top: "12px", position: "relative", "float": "left", fontSize: "56px"}}, 
					React.createElement("span", {style: integrated_loudness_warn_style}, integrated_loudness)
				), 
				React.createElement("div", {style: {left: "0px", top: "0px", position: "relative", "float": "left", fontSize: "16px", color: "#666", }}, 
					" LUFS"
				), 
				React.createElement("div", {style: {left: "18px", top: "22px", position: "relative", "float": "left", fontSize: "28px", }}, 
					React.createElement("span", {style: true_peak_warn_style}, true_peak)
				), 
				React.createElement("div", {style: {left: "-30px", top: "0px", position: "relative", "float": "left", fontSize: "16px", color: "#666"}}, 
					" dB TPK"
				), 

				React.createElement("div", {style: {left: "-5px", top: "0px", position: "relative", "float": "left", lineHeight: "15px", color: "rgb(148, 104, 83)"}}, 
					React.createElement("span", {style: {fontWeight: "normal",}}, "High"), 
					React.createElement("br", null), 
					React.createElement("span", null, "LRA"), 
					React.createElement("br", null), 
					React.createElement("span", {style: {fontWeight: "normal",}}, "Low")
				), 
				React.createElement("div", {style: {left: "5px", top: "0px", position: "relative", "float": "left", lineHeight: "15px", color: "rgb(187, 109, 71)"}}, 
					React.createElement("span", null, loudness_range_LRA_high), 
					React.createElement("br", null), 
					React.createElement("span", null, "Δ ", loudness_range_LRA), 
					React.createElement("br", null), 
					React.createElement("span", null, loudness_range_LRA_low)
				), 
				React.createElement("br", {style: {"float": "clear"}}), 
				React.createElement("div", {style: {left: "0px", top: "5px", marginTop:"33px", fontWeight: "normal", lineHeight: "20px", color: "rgb(84, 114, 148)"}}, 
					"Integrated threshold: ", React.createElement("span", {style: {fontWeight: "bold"}}, integrated_loudness_threshold), ", range: ", React.createElement("span", {style: {fontWeight: "bold"}}, loudness_range_threshold), 
					silence_label_warn, 
					React.createElement("span", {style: {"float": "right",
							padding: "0px 6px 3px 7px",
							border: "1px solid #888",
							color: "#888",
							marginTop: "2px", marginRight: "-12px", marginBottom: "0px",
							cursor: "pointer",
							width: "11px",
							textAlign: "center",}, 
						onClick: this.toogleBottomPanel}, 
						bottom_panel_icon
					)
				)
			), 
			bottom_panel
		));
	}
});

metadatas.ButtonChooseAudioStatBlock = React.createClass({displayName: "ButtonChooseAudioStatBlock",
	btnClick: function() {
		this.props.onChooseAudioStatBlock(this.props.channel);
	},
	render: function() {
		var style = {border: "1px solid #222",
			padding: "3px 6px",
			marginRight: "2px",
			color: "#bba",
			cursor: "pointer",
		};

		if (this.props.selected) {
			style.border = "1px solid #888";
			style.color = "#eee";
		}

		var channel_name = this.props.channel;
		if (channel_name != "Overall") {
			channel_name++;
			channel_name = "# " + channel_name;
		}

		return (React.createElement("span", {onClick: this.btnClick, style: style}, channel_name));
	}
});

metadatas.ButtonSilenceGotoPlay = React.createClass({displayName: "ButtonSilenceGotoPlay",
	btnClick: function() {
		if (this.props.onGotoSilence) {
			this.props.onGotoSilence(this.props.timevalue / 1000);
		}
	},
	render: function() {
		var style = {fontWeight: "bold"};
		if (this.props.onGotoSilence) {
			style.color = "#bbb";
			style.borderBottom = "1px dotted #ccc";
			style.cursor = "pointer";
		}
		var label = mydmam.format.msecToHMSms(this.props.timevalue, false, false);

		return (React.createElement("span", {onClick: this.btnClick, style: style}, label));
	}
});

})(window.mydmam.async.pathindex.metadatas);
// Generated by hd3gtv.mydmam.web.JSProcessor for the module internal
// Source hash: 7276fc4bfaf860c996c2c2b02b659829
